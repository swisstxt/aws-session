#!/bin/sh

echo "Generate and set temporary AWS session tokens for the AWS CLI or other tools." >&2
echo "To use this script, execute it like this: source aws-session [options]" >&2
echo "If you execute it directly, it will not export AWS_ environment vars into the calling shell." >&2
echo >&2

which aws >/dev/null || { echo "Required but not installed: aws" >&2; return 1; }
which jq >/dev/null || { echo "Required but not installed: jq" >&2; return 1; }

# default mode: generate MFA-authenticated session
mode=mfa

if [ "$#" -gt "0" ]; then
    mode="$1"
fi
case "$mode" in
    mfa)
        if [ "$#" -gt "1" ]; then
            mfa_device="$2"
        else
            mfa_devices=$(aws iam list-mfa-devices)
            mfa_device=$(echo "${mfa_devices}" | jq -r '.MFADevices[0].SerialNumber')
        fi
        echo "Using MFA device: ${mfa_device}" >&2
        read -p "Please input MFA token code: " token_code >&2
        aws_session=$(aws sts get-session-token --serial-number "${mfa_device}" --token-code "${token_code}")
        ;;
    pose)
        if [ "$#" -gt "1" ]; then
            account_id="$2"
        else
            accounts=$(aws organizations list-accounts)
            echo "Available accounts:" >&2
            echo "${accounts}" | jq -r ".Accounts[].Name" >&2
            read -p "Please enter an account name: " account_name >&2
            account_id=$(echo "${accounts}" | jq -r ".Accounts[] | select(.Name==\"${account_name}\").Id")
        fi
        if [ "$#" -gt "2" ]; then
            role_name="$3"
        else
            role_name=OrganizationAccountAccessRole
        fi
        session_name="assume-account-role-for-cli"
        aws_session=$(aws sts assume-role --role-arn "arn:aws:iam::${account_id}:role/${role_name}" --role-session-name "${session_name}")
        ;;
    clear)
        unset AWS_ACCESS_KEY_ID
        unset AWS_SECRET_ACCESS_KEY
        unset AWS_SESSION_TOKEN
        return 0
        ;;
    *)
        echo "Usage: $0 [MODE] [OPTIONS]..." >&2
        echo "aws-session mfa [DEVICE-ARN]" >&2
        echo "    Generate a token reinforced by multi-factor authentication. (this is the default mode)" >&2
        echo "    DEVICE-ARN can be the ARN of an MFA device. The user's first device is taken by default, otherwise." >&2
        echo "aws-session pose [ACCOUNT-ID] [ROLE]" >&2
        echo "    Impersonate another account using an IAM role on that account." >&2
        echo "    ACCOUNT-ID can be the ID of the target account Will show a list of organization accounts otherwise." >&2
        echo "    ROLE can be a the name of a specific IAM role on the target account. OrganizationAccountAccessRole is used by default." >&2
        echo "aws-session clear" >&2
        echo "    clears the session token, secret key and access key from the environment" >&2
        return 1
        ;;
esac

aws_key=$(echo "${aws_session}" | jq -r '.Credentials.AccessKeyId')
aws_secret=$(echo "${aws_session}" | jq -r '.Credentials.SecretAccessKey')
aws_token=$(echo "${aws_session}" | jq -r '.Credentials.SessionToken')
echo "Temporary access key: ${aws_key} (secret: redacted token: redacted)" >&2

export AWS_ACCESS_KEY_ID="${aws_key}"
export AWS_SECRET_ACCESS_KEY="${aws_secret}"
export AWS_SESSION_TOKEN="${aws_token}"
